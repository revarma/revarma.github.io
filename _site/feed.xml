<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-26T22:41:49-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Four White Spaces</title><subtitle>Welcome to my blog, where I document the things that spark my curiosity in the world of technology.  From tips and emerging tools to intriguing software trends and personal insights,  this blog is a collection of what I find interesting and worth exploring.
</subtitle><author><name>Eswara Rudraraju</name></author><entry><title type="html">Orchestration vs. Choreography in a service based architecture</title><link href="http://localhost:4000/architecture/2024/11/26/Orchestration-vs.-Choreography-in-software-systems.html" rel="alternate" type="text/html" title="Orchestration vs. Choreography in a service based architecture" /><published>2024-11-26T00:00:00-06:00</published><updated>2024-11-26T00:00:00-06:00</updated><id>http://localhost:4000/architecture/2024/11/26/Orchestration-vs.-Choreography-in-software-systems</id><content type="html" xml:base="http://localhost:4000/architecture/2024/11/26/Orchestration-vs.-Choreography-in-software-systems.html"><![CDATA[<p>Orchestration and Choreography are required when multiple services must be coordinated to complete a certain business transaction.</p>

<p><strong>Orchestration</strong> is the coordination of multiple services through the use of a separate mediator service that controls and manages the workflow of the transaction (like a conductor in an orchestra).</p>

<p><strong>Choreography</strong>, on the other hand, is the coordination of multiple services by which each service talks to one another without the use of a central mediator (like dancers in a dance).</p>

<p>As services become more fine-grained, both orchestration and choreography are necessary to tie the services together to complete the business transaction.</p>]]></content><author><name>Eswara Rudraraju</name></author><category term="architecture" /><summary type="html"><![CDATA[Orchestration and Choreography are required when multiple services must be coordinated to complete a certain business transaction.]]></summary></entry><entry><title type="html">Architecture Sinkhole</title><link href="http://localhost:4000/architecture/2024/11/26/architecture-sinkhole.html" rel="alternate" type="text/html" title="Architecture Sinkhole" /><published>2024-11-26T00:00:00-06:00</published><updated>2024-11-26T00:00:00-06:00</updated><id>http://localhost:4000/architecture/2024/11/26/architecture-sinkhole</id><content type="html" xml:base="http://localhost:4000/architecture/2024/11/26/architecture-sinkhole.html"><![CDATA[<h4 id="what">What:</h4>
<p>The concept of an <strong>“architecture sinkhole”</strong> refers to the practice of designing software or systems in such a way that they consume significant resources while providing limited benefits or value.</p>

<p>It can be described as a structure that does not perform its intended function well and instead creates a waste of time, money, or energy.</p>

<p>In software development, architecture sinkholes can occur when developers design systems with complex, over-engineered architectures that are difficult to maintain or modify. These architectures often require extensive resources, such as human expertise, time, and financial investment, but they may not provide any significant benefits to the organization or end-users.</p>

<p>Another type of architecture sinkhole is when a system fails to meet its intended requirements or goals, resulting in wasted effort, time, and money. This can happen for a variety of reasons, including poor design, faulty implementation, or inadequate resources.</p>

<p>Overall, an architecture sinkhole refers to any situation where a software or systems design fails to deliver the expected results or value, causing waste and inefficiency.</p>

<h4 id="example">Example:</h4>
<p>In an N-layered architecture, when a request passes from the User Interface (UI) layer directly to the Persistent Layer without incorporating any business rules in either the Business or Service Layers, the purpose of these layers during that request cycle is merely to create objects. <strong>This can result in unnecessary memory usage as objects are created but not utilized beyond their creation process</strong>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UI-Layer ➡️ Business-Layer ➡️ Service-Layer ➡️ Database
</code></pre></div></div>

<h4 id="what-tradeoffs-to-consider">What tradeoffs to consider:</h4>
<p>Maintain an oversight of your N-layered architecture to ensure that no more than 20% of your endpoints have sinkholes. If this percentage exceeds, consider a strategic reconfiguration of your architecture.</p>]]></content><author><name>Eswara Rudraraju</name></author><category term="architecture" /><summary type="html"><![CDATA[What: The concept of an “architecture sinkhole” refers to the practice of designing software or systems in such a way that they consume significant resources while providing limited benefits or value.]]></summary></entry><entry><title type="html">The Fundamentals of Software Architecture</title><link href="http://localhost:4000/architecture/2024/11/12/fundamentals-of-software-architecture.html" rel="alternate" type="text/html" title="The Fundamentals of Software Architecture" /><published>2024-11-12T00:00:00-06:00</published><updated>2024-11-12T00:00:00-06:00</updated><id>http://localhost:4000/architecture/2024/11/12/fundamentals-of-software-architecture</id><content type="html" xml:base="http://localhost:4000/architecture/2024/11/12/fundamentals-of-software-architecture.html"><![CDATA[<h1 id="key-takeaways">Key takeaways:</h1>
<ol>
  <li>Software Architecture is dynamic, is a tradeoff and is an iterative process.</li>
  <li>Architecture cannot be done at the beginning of an initiative and cannot expect it to remain constant during the development process.</li>
  <li>New changes keeps coming and architecture should incorporate those changes and keep evolving while considering tradeoffs.</li>
</ol>]]></content><author><name>Eswara Rudraraju</name></author><category term="architecture" /><summary type="html"><![CDATA[Key takeaways: Software Architecture is dynamic, is a tradeoff and is an iterative process. Architecture cannot be done at the beginning of an initiative and cannot expect it to remain constant during the development process. New changes keeps coming and architecture should incorporate those changes and keep evolving while considering tradeoffs.]]></summary></entry></feed>